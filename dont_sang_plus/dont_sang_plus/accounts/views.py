from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib import messages
from django.core.mail import send_mail
from django.conf import settings
from django.utils import timezone
from django.db import transaction
from django.http import JsonResponse

from .models import CustomUser
# ‚úÖ CORRIGE L'IMPORT DES FORMULAIRES
from .forms import DonorSignUpForm, HospitalSignUpForm

def custom_login(request):
    """Vue personnalis√©e pour la connexion"""
    if request.method == 'POST':
        email = request.POST.get('username')  # Le champ s'appelle username mais contient l'email
        password = request.POST.get('password')
        
        print(f"DEBUG: Tentative de connexion - Email: {email}")
        
        # Authentification avec l'email
        user = authenticate(request, username=email, password=password)
        
        if user is not None:
            print(f"DEBUG: Utilisateur trouv√© - {user.email}, Type: {user.user_type}")
            
            # V√©rification pour les h√¥pitaux
            if user.user_type == 'hospital':
                if not user.is_verified or user.verification_status != 'approved':
                    messages.error(request, 
                        "üè• Votre compte h√¥pital n'est pas encore valid√©. "
                        "Vous recevrez un email d√®s que la v√©rification sera termin√©e."
                    )
                    print("DEBUG: H√¥pital non v√©rifi√©")
                    form = AuthenticationForm()
                    return render(request, 'accounts/login.html', {'form': form})
            
            # Connexion r√©ussie
            login(request, user)
            print(f"DEBUG: Connexion r√©ussie pour {user.email}")
            
            # Redirection selon le type d'utilisateur
            if user.user_type == 'donor':
                messages.success(request, f"ü©∏ Bienvenue {user.get_full_name()} !")
                print("DEBUG: Redirection vers donor dashboard")
                return redirect('donations:donor_dashboard')
            elif user.user_type == 'hospital':
                messages.success(request, f"üè• Bienvenue {user.hospital_name} !")
                print("DEBUG: Redirection vers hospital dashboard")
                return redirect('donations:hospital_dashboard')
            else:
                print("DEBUG: Redirection vers home")
                return redirect('home')
        else:
            print("DEBUG: √âchec de l'authentification")
            messages.error(request, "‚ùå Nom d'utilisateur ou mot de passe incorrect.")
    
    form = AuthenticationForm()
    return render(request, 'accounts/login.html', {'form': form})

def custom_logout(request):
    """Vue personnalis√©e pour la d√©connexion"""
    logout(request)
    messages.success(request, "üëã Vous avez √©t√© d√©connect√© avec succ√®s.")
    return redirect('accounts:login')

def donor_signup(request):
    """Vue pour l'inscription des donneurs"""
    if request.method == 'POST':
        # ‚úÖ UTILISE LE BON NOM DE FORMULAIRE
        form = DonorSignUpForm(request.POST, request.FILES)
        if form.is_valid():
            try:
                with transaction.atomic():
                    user = form.save(commit=False)
                    user.user_type = 'donor'
                    user.is_verified = True  # Les donneurs sont valid√©s automatiquement
                    user.verification_status = 'approved'
                    user.is_active = True
                    user.save()
                    
                    print(f"DEBUG: Donneur cr√©√© - {user.get_full_name()}")
                    
                    # Email de bienvenue au donneur
                    try:
                        send_mail(
                            subject='ü©∏ Bienvenue dans Don Sang Plus !',
                            message=f'Bonjour {user.get_full_name()},\n\n'
                                   f'Votre compte donneur a √©t√© cr√©√© avec succ√®s !\n\n'
                                   f'üìã Vos informations :\n'
                                   f'‚Ä¢ Nom : {user.get_full_name()}\n'
                                   f'‚Ä¢ Groupe sanguin : {user.blood_type}\n'
                                   f'‚Ä¢ Ville : {user.city}\n\n'
                                   f'üéØ Vous pouvez maintenant vous connecter et commencer √† sauver des vies !\n\n'
                                   f'üîó Connexion : {request.build_absolute_uri("/accounts/login/")}\n\n'
                                   f'Merci de votre g√©n√©rosit√© !\n'
                                   f'√âquipe Don Sang Plus',
                            from_email=settings.DEFAULT_FROM_EMAIL,
                            recipient_list=[user.email],
                            fail_silently=True,
                        )
                        print("DEBUG: Email bienvenue donneur envoy√©")
                    except Exception as e:
                        print(f"ERREUR EMAIL DONNEUR: {e}")
                    
                    messages.success(request, 
                        f"‚úÖ Compte cr√©√© avec succ√®s ! Bienvenue {user.get_full_name()}. "
                        "Vous pouvez maintenant vous connecter."
                    )
                    return redirect('accounts:login')
            except Exception as e:
                print(f"Erreur lors de la cr√©ation du compte donneur: {e}")
                messages.error(request, "‚ùå Erreur lors de la cr√©ation du compte. Veuillez r√©essayer.")
    else:
        # ‚úÖ UTILISE LE BON NOM DE FORMULAIRE
        form = DonorSignUpForm()
    
    context = {
        'form': form,
        'title': 'ü©∏ Inscription Donneur',
        'signup_type': 'donor',
        'btn_class': 'btn-danger',
        'btn_text': 'Cr√©er mon compte donneur'
    }
    return render(request, 'accounts/signup.html', context)

def hospital_signup(request):
    """Vue pour l'inscription des h√¥pitaux"""
    if request.method == 'POST':
        # ‚úÖ UTILISE LE BON NOM DE FORMULAIRE
        form = HospitalSignUpForm(request.POST, request.FILES)
        if form.is_valid():
            try:
                with transaction.atomic():
                    user = form.save(commit=False)
                    user.user_type = 'hospital'
                    user.is_verified = False  # Les h√¥pitaux doivent √™tre valid√©s
                    user.verification_status = 'pending'
                    user.is_active = True
                    user.save()
                    
                    print(f"DEBUG: H√¥pital cr√©√© - {user.hospital_name}")
                    
                    # Email automatique √† l'admin
                    try:
                        print("DEBUG: Tentative d'envoi email admin...")
                        
                        send_mail(
                            subject='üö® NOUVEAU H√îPITAL √Ä VALIDER - URGENT',
                            message=f'‚ö†Ô∏è NOUVELLE DEMANDE DE VALIDATION :\n\n'
                                   f'üè• H√¥pital : {user.hospital_name}\n'
                                   f'üìß Email : {user.email}\n'
                                   f'üì± T√©l√©phone : {user.phone}\n'
                                   f'üìç Ville : {user.city}\n'
                                   f'üè∑Ô∏è Type : {user.get_hospital_type_display()}\n'
                                   f'üìÑ Licence : {user.hospital_license_number or "Non fournie"}\n'
                                   f'üìÖ Date : {timezone.now().strftime("%d/%m/%Y %H:%M")}\n\n'
                                   f'üëâ VALIDER ICI : {request.build_absolute_uri("/admin/accounts/customuser/")}\n\n'
                                   f'üîó Lien direct : {request.build_absolute_uri(f"/admin/accounts/customuser/{user.id}/change/")}\n\n'
                                   f'Don Sang Plus Admin',
                            from_email=settings.DEFAULT_FROM_EMAIL,
                            recipient_list=['romualdndri9@gmail.com'],
                            fail_silently=False,
                        )
                        print("DEBUG: Email admin envoy√© avec succ√®s")
                        
                    except Exception as e:
                        print(f"ERREUR EMAIL ADMIN: {e}")
                        messages.warning(request, f"Inscription r√©ussie mais email admin non envoy√©: {e}")
                    
                    # Email de confirmation au demandeur
                    try:
                        print("DEBUG: Tentative d'envoi email confirmation...")
                        
                        send_mail(
                            subject='üè• Inscription en attente de validation - Don Sang Plus',
                            message=f'Bonjour {user.get_full_name()},\n\n'
                                   f'Votre demande d\'inscription pour {user.hospital_name} '
                                   f'a √©t√© re√ßue et est en cours de v√©rification par notre √©quipe.\n\n'
                                   f'üìã Informations soumises :\n'
                                   f'‚Ä¢ H√¥pital : {user.hospital_name}\n'
                                   f'‚Ä¢ Type : {user.get_hospital_type_display()}\n'
                                   f'‚Ä¢ Ville : {user.city}\n\n'
                                   f'‚è≥ La v√©rification prend g√©n√©ralement 24-48h.\n'
                                   f'üìß Vous recevrez un email de confirmation d√®s validation.\n\n'
                                   f'Merci de votre patience !\n'
                                   f'√âquipe Don Sang Plus',
                            from_email=settings.DEFAULT_FROM_EMAIL,
                            recipient_list=[user.email],
                            fail_silently=False,
                        )
                        print("DEBUG: Email confirmation envoy√© avec succ√®s")
                        
                    except Exception as e:
                        print(f"ERREUR EMAIL CONFIRMATION: {e}")
                    
                    messages.success(request, 
                        "üéâ Inscription enregistr√©e avec succ√®s ! "
                        "Votre compte sera activ√© apr√®s v√©rification par notre √©quipe. "
                        "Vous recevrez un email de confirmation dans les 24-48h."
                    )
                    return redirect('accounts:login')
            except Exception as e:
                print(f"Erreur lors de la cr√©ation du compte h√¥pital: {e}")
                messages.error(request, "‚ùå Erreur lors de la cr√©ation du compte. Veuillez r√©essayer.")
    else:
        # ‚úÖ UTILISE LE BON NOM DE FORMULAIRE
        form = HospitalSignUpForm()
    
    context = {
        'form': form,
        'title': 'üè• Inscription H√¥pital',
        'signup_type': 'hospital',
        'btn_class': 'btn-info',
        'btn_text': 'Soumettre ma demande'
    }
    return render(request, 'accounts/signup.html', context)

@login_required
def dashboard(request):
    """Redirection automatique selon le type d'utilisateur"""
    if request.user.user_type == 'donor':
        return redirect('donations:donor_dashboard')
    elif request.user.user_type == 'hospital':
        return redirect('donations:hospital_dashboard')
    else:
        return redirect('home')

def is_admin(user):
    """V√©rification si l'utilisateur est admin"""
    return user.is_superuser

@login_required
@user_passes_test(is_admin)
def quick_validate_hospital(request, user_id):
    """Validation rapide d'un h√¥pital par l'admin"""
    hospital = get_object_or_404(CustomUser, id=user_id, user_type='hospital')
    
    if request.method == 'POST':
        action = request.POST.get('action')
        
        try:
            if action == 'approve':
                hospital.verification_status = 'approved'
                hospital.is_verified = True
                hospital.verified_at = timezone.now()
                hospital.verified_by = request.user
                hospital.save()
                
                # Email de validation
                send_mail(
                    subject='‚úÖ Compte valid√© - Don Sang Plus',
                    message=f'Bonjour {hospital.get_full_name()},\n\n'
                           f'Excellente nouvelle ! Votre compte pour {hospital.hospital_name} '
                           f'a √©t√© valid√© avec succ√®s.\n\n'
                           f'üéâ Vous pouvez maintenant vous connecter et utiliser toutes les fonctionnalit√©s :\n'
                           f'‚Ä¢ Cr√©er des demandes de sang\n'
                           f'‚Ä¢ Communiquer avec les donneurs\n'
                           f'‚Ä¢ G√©rer vos demandes\n\n'
                           f'üîó Connexion : {request.build_absolute_uri("/accounts/login/")}\n\n'
                           f'Merci de votre confiance !\n'
                           f'√âquipe Don Sang Plus',
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    recipient_list=[hospital.email],
                    fail_silently=True,
                )
                
                messages.success(request, f'‚úÖ H√¥pital {hospital.hospital_name} valid√© avec succ√®s !')
                
            elif action == 'reject':
                hospital.verification_status = 'rejected'
                hospital.save()
                
                # Email de rejet
                send_mail(
                    subject='‚ùå Demande non valid√©e - Don Sang Plus',
                    message=f'Bonjour {hospital.get_full_name()},\n\n'
                           f'Nous vous informons que votre demande d\'inscription pour '
                           f'{hospital.hospital_name} n\'a pas pu √™tre valid√©e.\n\n'
                           f'üìß Pour plus d\'informations, contactez-nous √† :\n'
                           f'romualdndri9@gmail.com\n\n'
                           f'Cordialement,\n'
                           f'√âquipe Don Sang Plus',
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    recipient_list=[hospital.email],
                    fail_silently=True,
                )
                
                messages.warning(request, f'‚ùå H√¥pital {hospital.hospital_name} rejet√©.')
                
            return JsonResponse({'status': 'success'})
            
        except Exception as e:
            print(f"Erreur validation h√¥pital: {e}")
            return JsonResponse({'status': 'error', 'message': str(e)})
    
    context = {'hospital': hospital}
    return render(request, 'admin/quick_validate.html', context)

# Vues suppl√©mentaires pour la compatibilit√©
def LogoutView(request):
    """Vue de d√©connexion alternative"""
    logout(request)
    return redirect('home')

def logout_default_user(request):
    """D√©connexion utilisateur par d√©faut"""
    if request.user.is_authenticated:
        logout(request)
    return redirect('accounts:login')